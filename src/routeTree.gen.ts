/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SuccessRouteImport } from './routes/success'
import { Route as CollectionRouteImport } from './routes/collection'
import { Route as CartRouteImport } from './routes/cart'
import { Route as IndexRouteImport } from './routes/index'

const CheckoutLazyRouteImport = createFileRoute('/checkout')()
const ProductsIndexLazyRouteImport = createFileRoute('/products/')()
const ProductsProductIdLazyRouteImport = createFileRoute(
  '/products/$productId',
)()

const CheckoutLazyRoute = CheckoutLazyRouteImport.update({
  id: '/checkout',
  path: '/checkout',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/checkout.lazy').then((d) => d.Route))
const SuccessRoute = SuccessRouteImport.update({
  id: '/success',
  path: '/success',
  getParentRoute: () => rootRouteImport,
} as any)
const CollectionRoute = CollectionRouteImport.update({
  id: '/collection',
  path: '/collection',
  getParentRoute: () => rootRouteImport,
} as any)
const CartRoute = CartRouteImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIndexLazyRoute = ProductsIndexLazyRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/products/index.lazy').then((d) => d.Route),
)
const ProductsProductIdLazyRoute = ProductsProductIdLazyRouteImport.update({
  id: '/products/$productId',
  path: '/products/$productId',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/products/$productId.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/collection': typeof CollectionRoute
  '/success': typeof SuccessRoute
  '/checkout': typeof CheckoutLazyRoute
  '/products/$productId': typeof ProductsProductIdLazyRoute
  '/products': typeof ProductsIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/collection': typeof CollectionRoute
  '/success': typeof SuccessRoute
  '/checkout': typeof CheckoutLazyRoute
  '/products/$productId': typeof ProductsProductIdLazyRoute
  '/products': typeof ProductsIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/collection': typeof CollectionRoute
  '/success': typeof SuccessRoute
  '/checkout': typeof CheckoutLazyRoute
  '/products/$productId': typeof ProductsProductIdLazyRoute
  '/products/': typeof ProductsIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cart'
    | '/collection'
    | '/success'
    | '/checkout'
    | '/products/$productId'
    | '/products'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cart'
    | '/collection'
    | '/success'
    | '/checkout'
    | '/products/$productId'
    | '/products'
  id:
    | '__root__'
    | '/'
    | '/cart'
    | '/collection'
    | '/success'
    | '/checkout'
    | '/products/$productId'
    | '/products/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CartRoute: typeof CartRoute
  CollectionRoute: typeof CollectionRoute
  SuccessRoute: typeof SuccessRoute
  CheckoutLazyRoute: typeof CheckoutLazyRoute
  ProductsProductIdLazyRoute: typeof ProductsProductIdLazyRoute
  ProductsIndexLazyRoute: typeof ProductsIndexLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/checkout': {
      id: '/checkout'
      path: '/checkout'
      fullPath: '/checkout'
      preLoaderRoute: typeof CheckoutLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/success': {
      id: '/success'
      path: '/success'
      fullPath: '/success'
      preLoaderRoute: typeof SuccessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collection': {
      id: '/collection'
      path: '/collection'
      fullPath: '/collection'
      preLoaderRoute: typeof CollectionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/$productId': {
      id: '/products/$productId'
      path: '/products/$productId'
      fullPath: '/products/$productId'
      preLoaderRoute: typeof ProductsProductIdLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CartRoute: CartRoute,
  CollectionRoute: CollectionRoute,
  SuccessRoute: SuccessRoute,
  CheckoutLazyRoute: CheckoutLazyRoute,
  ProductsProductIdLazyRoute: ProductsProductIdLazyRoute,
  ProductsIndexLazyRoute: ProductsIndexLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
